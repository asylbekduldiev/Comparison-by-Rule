package com.example.diploma.service;import org.apache.poi.xwpf.usermodel.*;import org.apache.poi.xwpf.usermodel.XWPFTable;import org.apache.poi.xwpf.usermodel.XWPFTableRow;import org.apache.poi.xwpf.usermodel.XWPFTableCell;import org.springframework.stereotype.Service;import java.io.ByteArrayInputStream;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern;@Servicepublic class FileService {  // –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ  private static final List<String> REQUIRED_SECTIONS = Arrays.asList(    "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",    "–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è", "–≤–≤–µ–¥–µ–Ω–∏–µ", "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ",    "—Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"  );  private static final int MIN_SOURCES = 25;  public String analyzeWordFile(byte[] content) throws Exception {    StringBuilder report = new StringBuilder("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ú–ê–ì–ò–°–¢–ï–†–°–ö–û–ô –î–ò–°–°–ï–†–¢–ê–¶–ò–ò\n");    report.append("–°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ü –ú–£–ê 021-23\n");    report.append("================================================\n\n");    boolean hasErrors = false;    Map<String, Object> analysisResults = new HashMap<>();    try (XWPFDocument doc = new XWPFDocument(new ByteArrayInputStream(content))) {      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞      hasErrors |= checkDocumentStructure(doc, report, analysisResults);      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞      hasErrors |= checkTitlePage(doc, report);      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞      hasErrors |= checkTextFormatting(doc, report);      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏      hasErrors |= checkDocumentVolume(doc, report, analysisResults);      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è      hasErrors |= checkIntroduction(doc, report);      // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏      hasErrors |= checkMainPart(doc, report);      // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è      hasErrors |= checkConclusion(doc, report);      // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤      hasErrors |= checkSources(doc, report);      // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ      hasErrors |= checkCitations(doc, report);      // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü      hasErrors |= checkPageNumbering(doc, report);      // 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∏ —Ä–∏—Å—É–Ω–∫–æ–≤      hasErrors |= checkTablesAndFigures(doc, report);      // 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª      hasErrors |= checkFormulas(doc, report);      // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç      report.append("\n================================================\n");      report.append("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:\n");      report.append("================================================\n");      if (!hasErrors) {        report.append("‚úÖ –î–ò–°–°–ï–†–¢–ê–¶–ò–Ø –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –í–°–ï–ú –û–°–ù–û–í–ù–´–ú –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú\n");        report.append("–î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–µ.\n");      } else {        report.append("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ê–†–£–®–ï–ù–ò–Ø –¢–†–ï–ë–û–í–ê–ù–ò–ô\n");        report.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—â–∏—Ç–æ–π.\n");      }      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞      if (analysisResults.containsKey("totalPages")) {        report.append("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê:\n");        report.append("- –û–±—â–∏–π –æ–±—ä–µ–º: ").append(analysisResults.get("totalPages")).append(" —Å—Ç—Ä–∞–Ω–∏—Ü\n");      }      if (analysisResults.containsKey("sourcesCount")) {        report.append("- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ").append(analysisResults.get("sourcesCount")).append("\n");      }    }    return report.toString();  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤   */  private boolean checkDocumentStructure(XWPFDocument doc, StringBuilder report, Map<String, Object> results) {    report.append("1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–û–ö–£–ú–ï–ù–¢–ê:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    Set<String> foundSections = new HashSet<>();    List<XWPFParagraph> paragraphs = doc.getParagraphs();    for (XWPFParagraph para : paragraphs) {      String text = para.getText().toLowerCase().trim();      for (String section : REQUIRED_SECTIONS) {        if (text.contains(section) && !foundSections.contains(section)) {          foundSections.add(section);          report.append("  ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª: \"").append(section.toUpperCase()).append("\"\n");        }      }    }    for (String requiredSection : REQUIRED_SECTIONS) {      if (!foundSections.contains(requiredSection)) {        report.append("  ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –†–ê–ó–î–ï–õ: \"").append(requiredSection.toUpperCase()).append("\"\n");        hasErrors = true;      }    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞   */  private boolean checkTitlePage(XWPFDocument doc, StringBuilder report) {    report.append("2. –ü–†–û–í–ï–†–ö–ê –¢–ò–¢–£–õ–¨–ù–û–ì–û –õ–ò–°–¢–ê:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    List<XWPFParagraph> firstPageParagraphs = new ArrayList<>();    // –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç)    List<XWPFParagraph> paragraphs = doc.getParagraphs();    for (int i = 0; i < Math.min(10, paragraphs.size()); i++) {      firstPageParagraphs.add(paragraphs.get(i));    }    String fullTitleText = firstPageParagraphs.stream()      .map(XWPFParagraph::getText)      .reduce("", (a, b) -> a + " " + b)      .toLowerCase();    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞    Map<String, String> requiredElements = new HashMap<>();    requiredElements.put("—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∞—Å—Ç–∞–Ω–∞");    requiredElements.put("—Å—Ç–µ–ø–µ–Ω—å", "–º–∞–≥–∏—Å—Ç—Ä");    requiredElements.put("–Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å");    requiredElements.put("–≥–æ—Ä–æ–¥", "–∞—Å—Ç–∞–Ω–∞");    for (Map.Entry<String, String> element : requiredElements.entrySet()) {      if (fullTitleText.contains(element.getValue())) {        report.append("  ‚úÖ ").append(element.getKey().toUpperCase()).append(" —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");      } else {        report.append("  ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢: ").append(element.getKey().toUpperCase()).append("\n");        hasErrors = true;      }    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º   */  private boolean checkTextFormatting(XWPFDocument doc, StringBuilder report) {    report.append("3. –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    List<XWPFParagraph> paragraphs = doc.getParagraphs();    int checkedParagraphs = 0;    for (int i = 0; i < Math.min(50, paragraphs.size()); i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤      XWPFParagraph para = paragraphs.get(i);      String text = para.getText().trim();      if (text.isEmpty() || text.length() < 10) continue;      checkedParagraphs++;      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)      List<XWPFRun> runs = para.getRuns();      for (XWPFRun run : runs) {        if (run.getFontSize() != -1 && run.getFontSize() != 14) {          report.append("  ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ ").append(run.getFontSize()).append(" (—Ç—Ä–µ–±—É–µ—Ç—Å—è 14)\n");          hasErrors = true;          break;        }      }      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤      if (text.contains("  ")) {        report.append("  ‚ùå –î–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ: \"").append(text.substring(0, Math.min(50, text.length()))).append("...\"\n");        hasErrors = true;      }      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è      Pattern p = Pattern.compile(" [,.;:!?]");      Matcher m = p.matcher(text);      if (m.find()) {        report.append("  ‚ùå –ü—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: \"").append(m.group()).append("\"\n");        hasErrors = true;      }      if (checkedParagraphs >= 20) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏    }    if (!hasErrors) {      report.append("  ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏   */  private boolean checkDocumentVolume(XWPFDocument doc, StringBuilder report, Map<String, Object> results) {    report.append("4. –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–ê –î–ò–°–°–ï–†–¢–ê–¶–ò–ò:\n");    report.append("----------------------------------------\n");    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)    int totalParagraphs = doc.getParagraphs().size();    int estimatedPages = Math.max(1, totalParagraphs / 25); // –ü—Ä–∏–º–µ—Ä–Ω–æ 25 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É    results.put("totalPages", estimatedPages);    boolean hasErrors = false;    report.append("  üìÑ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: ").append(estimatedPages).append(" —Å—Ç—Ä–∞–Ω–∏—Ü\n");    // –î–ª—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: 70-90 —Å—Ç—Ä–∞–Ω–∏—Ü    // –î–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö: 60-70 —Å—Ç—Ä–∞–Ω–∏—Ü    if (totalParagraphs < 60) {      report.append("  ‚ùå –û–ë–™–ï–ú –ù–ï–î–û–°–¢–ê–¢–û–ß–ï–ù (–º–∏–Ω–∏–º—É–º 60 —Å—Ç—Ä–∞–Ω–∏—Ü)\n");      hasErrors = true;    } else if (estimatedPages > 90) {      report.append("  ‚ö†Ô∏è –û–±—ä–µ–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞–∫—Å–∏–º—É–º (90 —Å—Ç—Ä–∞–Ω–∏—Ü)\n");    } else {      report.append("  ‚úÖ –û–±—ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è   */  private boolean checkIntroduction(XWPFDocument doc, StringBuilder report) {    report.append("5. –ü–†–û–í–ï–†–ö–ê –í–í–ï–î–ï–ù–ò–Ø:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    String introText = findSectionText(doc, "–≤–≤–µ–¥–µ–Ω–∏–µ");    if (introText == null || introText.trim().isEmpty()) {      report.append("  ‚ùå –í–í–ï–î–ï–ù–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û\n");      return true;    }    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–≤–µ–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø. 4.3.6    String[] requiredElements = {      "–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "—Ü–µ–ª—å", "–∑–∞–¥–∞—á", "–æ–±—ä–µ–∫—Ç", "–ø—Ä–µ–¥–º–µ—Ç",      "–º–µ—Ç–æ–¥", "–∑–Ω–∞—á–∏–º–æ—Å—Ç—å", "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å"    };    String lowerIntro = introText.toLowerCase();    int foundElements = 0;    for (String element : requiredElements) {      if (lowerIntro.contains(element)) {        foundElements++;        report.append("  ‚úÖ ").append(element.toUpperCase()).append(" - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");      } else {        report.append("  ‚ùå ").append(element.toUpperCase()).append(" - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");        hasErrors = true;      }    }    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –≤–≤–µ–¥–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)    int introLength = introText.length();    if (introLength < 1000) {      report.append("  ‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–º (").append(introLength).append(" —Å–∏–º–≤–æ–ª–æ–≤)\n");    } else if (introLength > 5000) {      report.append("  ‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –æ–±—ä–µ–º–Ω—ã–º (").append(introLength).append(" —Å–∏–º–≤–æ–ª–æ–≤)\n");    }    report.append("  üìä –ù–∞–π–¥–µ–Ω–æ ").append(foundElements).append(" –∏–∑ ").append(requiredElements.length).append(" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n");    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏   */  private boolean checkMainPart(XWPFDocument doc, StringBuilder report) {    report.append("6. –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ô –ß–ê–°–¢–ò:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    // –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏ (1, 2, 3 –∏ —Ç.–¥.)    List<XWPFParagraph> paragraphs = doc.getParagraphs();    int sectionsFound = 0;    Pattern sectionPattern = Pattern.compile("^\\s*[1-9]\\s+[–ê-–Ø].*", Pattern.UNICODE_CHARACTER_CLASS);    for (XWPFParagraph para : paragraphs) {      String text = para.getText().trim();      if (sectionPattern.matcher(text).matches()) {        sectionsFound++;        report.append("  ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª: \"").append(text).append("\"\n");      }    }    if (sectionsFound < 2) {      report.append("  ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –†–ê–ó–î–ï–õ–û–í (–Ω–∞–π–¥–µ–Ω–æ ").append(sectionsFound).append(", —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2)\n");      hasErrors = true;    } else {      report.append("  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (").append(sectionsFound).append(")\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è   */  private boolean checkConclusion(XWPFDocument doc, StringBuilder report) {    report.append("7. –ü–†–û–í–ï–†–ö–ê –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:\n");    report.append("----------------------------------------\n");    String conclusionText = findSectionText(doc, "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ");    if (conclusionText == null || conclusionText.trim().isEmpty()) {      report.append("  ‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û\n");      return true;    }    boolean hasErrors = false;    String lowerConclusion = conclusionText.toLowerCase();    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø. 4.3.8    String[] requiredElements = {      "–≤—ã–≤–æ–¥—ã", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"    };    int foundElements = 0;    for (String element : requiredElements) {      if (lowerConclusion.contains(element)) {        foundElements++;        report.append("  ‚úÖ ").append(element.toUpperCase()).append(" - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");      }    }    if (foundElements < 2) {      report.append("  ‚ö†Ô∏è –í –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (").append(foundElements).append(" –∏–∑ ").append(requiredElements.length).append(")\n");    }    report.append("  üìä –û–±—ä–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏—è: ").append(conclusionText.length()).append(" —Å–∏–º–≤–æ–ª–æ–≤\n");    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤   */  private boolean checkSources(XWPFDocument doc, StringBuilder report) {    report.append("8. –ü–†–û–í–ï–†–ö–ê –°–ü–ò–°–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    String sourcesText = findSectionText(doc, "—Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");    if (sourcesText == null || sourcesText.trim().isEmpty()) {      report.append("  ‚ùå –°–ü–ò–°–û–ö –ò–°–¢–û–ß–ù–ò–ö–û–í –ù–ï –ù–ê–ô–î–ï–ù\n");      return true;    }    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤    Pattern sourcePattern = Pattern.compile("^\\s*\\d+\\s+", Pattern.MULTILINE);    Matcher matcher = sourcePattern.matcher(sourcesText);    int sourcesCount = 0;    while (matcher.find()) {      sourcesCount++;    }    report.append("  üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ").append(sourcesCount).append("\n");    if (sourcesCount < MIN_SOURCES) {      report.append("  ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ò–°–¢–û–ß–ù–ò–ö–û–í (–º–∏–Ω–∏–º—É–º ").append(MIN_SOURCES).append(")\n");      hasErrors = true;    } else {      report.append("  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ   */  private boolean checkCitations(XWPFDocument doc, StringBuilder report) {    report.append("9. –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö –í –¢–ï–ö–°–¢–ï:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    List<XWPFParagraph> paragraphs = doc.getParagraphs();    int citationsFound = 0;    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö [1], [2, 3] –∏ —Ç.–¥.    Pattern citationPattern = Pattern.compile("\\[\\d+(,\\s*\\d+)*\\]");    for (XWPFParagraph para : paragraphs) {      String text = para.getText();      Matcher matcher = citationPattern.matcher(text);      while (matcher.find()) {        citationsFound++;      }    }    report.append("  üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ").append(citationsFound).append("\n");    if (citationsFound < 10) {      report.append("  ‚ö†Ô∏è –ú–∞–ª–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ\n");    } else {      report.append("  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü   */  private boolean checkPageNumbering(XWPFDocument doc, StringBuilder report) {    report.append("10. –ü–†–û–í–ï–†–ö–ê –ù–£–ú–ï–†–ê–¶–ò–ò –°–¢–†–ê–ù–ò–¶:\n");    report.append("----------------------------------------\n");    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞—Ö    List<XWPFFooter> footers = doc.getFooterList();    boolean hasPageNumbers = false;    for (XWPFFooter footer : footers) {      String footerText = footer.getText().toLowerCase();      if (footerText.matches(".*\\d+.*")) {        hasPageNumbers = true;        break;      }    }    if (hasPageNumbers) {      report.append("  ‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");    } else {      report.append("  ‚ö†Ô∏è –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞—Ö\n");    }    report.append("\n");    return false; // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∏ —Ä–∏—Å—É–Ω–∫–æ–≤   */  private boolean checkTablesAndFigures(XWPFDocument doc, StringBuilder report) {    report.append("11. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶ –ò –†–ò–°–£–ù–ö–û–í:\n");    report.append("----------------------------------------\n");    boolean hasErrors = false;    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü    List<XWPFTable> tables = doc.getTables();    report.append("  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: ").append(tables.size()).append("\n");    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ä–∏—Å—É–Ω–∫–∞–º    List<XWPFParagraph> paragraphs = doc.getParagraphs();    int figuresCount = 0;    Pattern figurePattern = Pattern.compile("—Ä–∏—Å—É–Ω–æ–∫\\s+\\d+", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);    for (XWPFParagraph para : paragraphs) {      String text = para.getText().toLowerCase();      if (figurePattern.matcher(text).find()) {        figuresCount++;      }    }    report.append("  üñºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å—É–Ω–∫–æ–≤: ").append(figuresCount).append("\n");    if (tables.size() > 0 || figuresCount > 0) {      report.append("  ‚úÖ –ò–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n");    } else {      report.append("  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ —Ä–∏—Å—É–Ω–∫–∏\n");    }    report.append("\n");    return hasErrors;  }  /**   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª   */  private boolean checkFormulas(XWPFDocument doc, StringBuilder report) {    report.append("12. –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–£–õ:\n");    report.append("----------------------------------------\n");    List<XWPFParagraph> paragraphs = doc.getParagraphs();    int formulasCount = 0;    // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –ø–æ –Ω–∞–ª–∏—á–∏—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)    Pattern formulaPattern = Pattern.compile("[=+\\-*/^(){}\\[\\]‚àë‚à´‚àè‚àö].*[=+\\-*/^(){}\\[\\]‚àë‚à´‚àè‚àö]");    for (XWPFParagraph para : paragraphs) {      String text = para.getText();      if (formulaPattern.matcher(text).find() && text.trim().length() > 5) {        formulasCount++;      }    }    report.append("  üî¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º—É–ª: ").append(formulasCount).append("\n");    if (formulasCount > 0) {      report.append("  ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–ø–∞—Ä–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n");    } else {      report.append("  ‚ÑπÔ∏è –§–æ—Ä–º—É–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã\n");    }    report.append("\n");    return false; // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞  }  /**   * –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞   */  private String findSectionText(XWPFDocument doc, String sectionName) {    List<XWPFParagraph> paragraphs = doc.getParagraphs();    StringBuilder sectionText = new StringBuilder();    boolean inSection = false;    for (XWPFParagraph para : paragraphs) {      String text = para.getText().trim();      String lowerText = text.toLowerCase();      if (lowerText.equals(sectionName) || lowerText.startsWith(sectionName)) {        inSection = true;        continue;      }      if (inSection) {        // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞        if (text.matches("^[–ê-–Ø][–ê-–Ø\\s]+$") && text.length() < 100) {          break;        }        sectionText.append(text).append(" ");      }    }    return sectionText.toString().trim();  }}
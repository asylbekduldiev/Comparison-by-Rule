package com.example.diploma.controller;import com.example.diploma.service.FileService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.nio.charset.StandardCharsets;@RestController@RequestMapping("/file-upload")@CrossOrigin(origins = "http://localhost:4200")public class FileUpload {  @Autowired  private FileService fileService;  @PostMapping  public ResponseEntity<byte[]> postFile(@RequestParam("file") MultipartFile file) {    try {      if (file.isEmpty()) {        return createErrorResponse("Файл не выбран или пуст!");      }      String filename = file.getOriginalFilename();      if (filename == null || filename.trim().isEmpty()) {        return createErrorResponse("Имя файла не определено!");      }      byte[] content = file.getBytes();      String normalizedFilename = filename.toLowerCase().trim();      System.out.printf("Получен файл: %s (размер: %d байт)%n", filename, content.length);      String report;      if (normalizedFilename.endsWith(".docx")) {        System.out.println("Обрабатываем DOCX файл...");        report = fileService.analyzeWordFile(content);      } else if (normalizedFilename.endsWith(".pdf")) {        return createErrorResponse(          "PDF пока не поддерживается.\nПоддерживаемые форматы: .docx"        );      } else {        return createErrorResponse(          "Неподдерживаемый формат!\nПоддерживаемые форматы: .docx"        );      }      byte[] reportBytes = report.getBytes(StandardCharsets.UTF_8);      String reportFilename = "analysis_report_" + System.currentTimeMillis() + ".txt";      return ResponseEntity.ok()        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + reportFilename + "\"")        .header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_VALUE + ";charset=UTF-8")        .body(reportBytes);    } catch (Exception e) {      e.printStackTrace();      return createErrorResponse("Ошибка при обработке файла: " + e.getMessage());    }  }  private ResponseEntity<byte[]> createErrorResponse(String errorMessage) {    System.err.println("Ошибка: " + errorMessage);    byte[] errorBytes = errorMessage.getBytes(StandardCharsets.UTF_8);    return ResponseEntity      .badRequest()      .header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_VALUE + ";charset=UTF-8")      .body(errorBytes);  }  @GetMapping("/supported-formats")  public ResponseEntity<String> getSupportedFormats() {    String formats = "Поддерживаемые форматы: .docx";    return ResponseEntity.ok()      .header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_VALUE + ";charset=UTF-8")      .body(formats);  }  @GetMapping("/health")  public ResponseEntity<String> healthCheck() {    return ResponseEntity.ok("Сервис загрузки файлов работает");  }}